package br.com.coldigogeladeiras.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.JsonObject;

import br.com.coldigogeladeiras.jdbcinterface.MarcaDAO;
import br.com.coldigogeladeiras.modelo.Marca;
import br.com.coldigogeladeiras.modelo.Produto;

public class JDBCMarcaDAO implements MarcaDAO {
	private Connection conexao;

	public JDBCMarcaDAO(Connection conexao) {
		this.conexao = conexao;
	}

	public List<Marca> buscar() {
		// TODO Auto-generated method stub

		String comando = "SELECT * FROM marcas";
		List<Marca> listMarcas = new ArrayList<Marca>();

		Marca marca = null;

		try {
			Statement stmt = conexao.createStatement();

			ResultSet rs = stmt.executeQuery(comando);

			while (rs.next()) {
				marca = new Marca();

				int id = rs.getInt("id");
				String nome = rs.getString("nome");

				marca.setId(id);
				marca.setNome(nome);
				System.out.println(marca);
				listMarcas.add(marca);
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return listMarcas;
	}

	public boolean inserir(Marca marca) {
		String comando = "INSERT INTO marcas" + "(id, nome)" + "Values(?,?)";
		PreparedStatement m;

		try {
			m = this.conexao.prepareStatement(comando);

			m.setInt(1, marca.getId());
			m.setString(2, marca.getNome());
			m.execute();
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}

	public List<JsonObject> buscarPorNome(String nome) {
		String comando = "SELECT * FROM marcas ";

		// O INNER JOIN é responsável pela junção dos dados em que somente a condição do
		// join é verdadeira, no caso acima estamos juntando duas tabelas diferentes e
		// só deve trazer os resultados dos produtos que possuem uma marca vinculada
		if (!nome.equals("")) {
			comando += "WHERE nome LIKE '%" + nome + "%' ";
		}

		// O ORDER by vai fazer a ordenação dos resultados, no caso abaixo está
		// realizando a ordenação de forma crescente considerando a hierarquia:
		// categoria, depois marca e depois modelo
		comando += "ORDER BY id ASC, nome ASC";

		List<JsonObject> listaMarcas = new ArrayList<JsonObject>();
		JsonObject marca = null;

		try {
			Statement stmt = conexao.createStatement();
			ResultSet rs = stmt.executeQuery(comando);

			while (rs.next()) {
				int id = rs.getInt("id");
				String nome = rs.getString("nome");

				marca = new JsonObject();
				marca.addProperty("id", id);
				marca.addProperty("nome", nome);

				listaMarcas.add(marca);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return listaMarcas;
	}

	public boolean deletar(int id) {
		String comando = "DELETE FROM marcas WHERE id = ?";
		PreparedStatement m;
		try {
			m = this.conexao.prepareStatement(comando);
			m.setInt(1, id);
			m.execute();
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}

	public Marca buscarPorId(int id) {
		String comando = "SELECT * FROM marcas WHERE marcas.id = ?";
		Marca marca = new Marca();
		try {
			PreparedStatement p = this.conexao.prepareStatement(comando);
			p.setInt(1, id);
			ResultSet rs = p.executeQuery();
			while (rs.next()) {
				String categoria = rs.getString("categoria");
				String modelo = rs.getString("modelo");
				int capacidade = rs.getInt("capacidade");
				float valor = rs.getFloat("valor");
				int marcaId = rs.getInt("marcas_id");

				produto.setId(id);
				produto.setCategoria(categoria);
				produto.setMarcaId(marcaId);
				produto.setModelo(modelo);
				produto.setCapacidade(capacidade);
				produto.setValor(valor);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return produto;

	}

}
